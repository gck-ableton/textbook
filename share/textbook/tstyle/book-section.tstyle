;;; Copyright (c) 2017 Gregor Klinke
;;; All rights reserved.

(define (section-layout gi)
  (case gi
   ;;               #font-size line-spacing weight posture before after number-style
   ((part)          (vector 16pt 19.5pt 'bold  'upright 16pt 8pt "I"))
   ((chapter)       (vector 14pt 16.5pt 'bold  'upright 14pt 7pt "1"))
   ((section)       (vector 12pt 14pt   'bold  'upright 14pt 7pt "1"))
   ((subsection)    (vector 10pt 12pt   'bold  'upright 14pt 7pt "1"))
   ((subsubsection) (vector 10pt 12pt   'bold  'italic  14pt 7pt "1"))
   ((appendix)      (vector 14pt 16.5pt 'bold  'upright 14pt 7pt "A"))
   ((index)         (vector 14pt 16.5pt 'bold  'upright 14pt 7pt #f))
   ((preface)       (vector 14pt 16.5pt 'bold  'upright 14pt 7pt #f))
   ((introduction)  (vector 14pt 16.5pt 'bold  'upright 14pt 7pt #f))
   ((content)       (vector 14pt 16.5pt 'bold  'upright 14pt 7pt #f))
   ((synopsis)      (vector 14pt 16.5pt 'bold  'upright 14pt 7pt #f))
   ((seealso)       (vector 14pt 16.5pt 'bold  'upright 14pt 7pt #f))
   ))

(define (div-number nd num-format)
  (let ((idx (+ (node-list-length (select-elements (preced nd) (gi nd)))
                1)))
    (format-number idx num-format)))


(define (any-section? nd)
  (case (gi nd)
    ((part chapter section subsection subsubsection appendix index
           preface introduction content synopsis seealso) #t)
    (else #f)))


(define (section-title-number-tokens nd)
  (let loop ((p nd)
             (numbers (list)))
    (if (not (any-section? p))
        (reverse numbers)
        (let* ((layout (section-layout (gi p)))
               (num-format (vector-ref layout 6)))
          (loop (parent p)
                (if num-format
                    (append numbers (list (div-number p num-format)))
                    numbers))) )))


(define (section-title-number nd)
  (string-join (section-title-number-tokens nd) "."))


(define (section-title-sosofo title nd)
  (let ((node-title (attribute "title" nd)))
    (if (= (node-list-length node-title) 0)
        (if title (literal title) (literal ""))
        (process-node-list node-title))))

(define (non-p? nd)
  (case (gi nd)
    ((part admon itemize enumerate) #t)
    (else #f)))


(define (format-section title nd)
  (let* ((layout (section-layout (gi nd)))
         (title-num-sosofo (literal (section-title-number nd)))
         (title-sosofo (section-title-sosofo title nd))
         )
    (sosofo-append
     (make anchor
       id: (id nd))
     (make paragraph
       font-size: (vector-ref layout 0)
       line-spacing: (vector-ref layout 1)
       space-before: (vector-ref layout 4)
       space-after:  (vector-ref layout 5)
       font-weight:  (vector-ref layout 2)
       font-posture: (vector-ref layout 3)

       keep-with-next?: #t
       first-line-start-indent: -45mm
       start-indent: 0pt
       quadding: 'left

       (sosofo-append
        (make line-field
          field-width: 41mm
          field-align: 'right
          title-num-sosofo)
        (make line-field
          field-width: 4mm
          (empty-sosofo))
        title-sosofo))

     (let ((nl (children nd)))
       (if (or (node-list-empty? nl)
               (any-section? (node-list-first nl))
               (not (eqv? (gi (node-list-first nl)) 'p)))
           (process-node-list-left-trim-idx-ws nl)
           (sosofo-append
            (make paragraph
              quadding: 'justify
              first-line-start-indent: 0pt
              (process-node-list-left-trim-idx-ws (children (node-list-first nl))))
            (process-node-list-left-trim-idx-ws (node-list-rest nl)))
           ))
     )))

(define %chapters-on-separate-pages% #f)
(element chapter
  (make display-group
    break-before?: (if %chapters-on-separate-pages% 'page #f)
    (format-section "Chapter" (current-node))))

(element introduction
  (make display-group
    break-before?: (if %chapters-on-separate-pages% 'page #f)
    (format-section "Introduction" (current-node))))

(element preface
  (make display-group
    break-before?: (if %chapters-on-separate-pages% 'page #f)
    (format-section "Preface" (current-node))))

(element section
  (format-section "Section" (current-node)))

(element subsection
  (format-section #f (current-node)))

(element subsubsection
  (format-section #f (current-node)))

(element paragraph
  (format-section #f (current-node)))

(element appendix
  (make display-group
    break-before?: (if %chapters-on-separate-pages% 'page #f)
    (format-section "Appendix" (current-node))))

(element content
  (make display-group
    break-before?: 'page
    break-after?: 'page
    (format-section "Contents" (current-node))))

(element index
  (make display-group
    break-before?: 'page
    (format-section "Index" (current-node))))

;; part
;; tome
