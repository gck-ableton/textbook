;;; Copyright (c) 2017 Gregor Klinke
;;; All rights reserved.

(define (content-chapter title nd)
  (let* ((title-num-sosofo (literal (section-title-number nd)))
         (title-sosofo (section-title-sosofo title nd)))
    (make paragraph
      space-before: 7pt
      space-after: 3pt
      quadding: 'left
      first-line-start-indent: -45mm
      start-indent: 0pt
      font-size: 12pt
      font-weight: 'bold
      end-indent: 15pt
      last-line-end-indent: -15pt

      (sosofo-append
       (make line-field
         field-width: 41mm
         field-align: 'right
         title-num-sosofo)
       (make line-field
         field-width: 4mm
         (empty-sosofo))
       title-sosofo
       (literal " ")
       (make line-field
         field-align: 'right
         (make page-number
           refid: (id nd)))
       ))))


(define (content-section title nd)
  (let* ((title-num-sosofo (literal (section-title-number nd)))
         (title-sosofo (section-title-sosofo title nd)))
    (make paragraph
      quadding: 'left
      first-line-start-indent: 0mm
      start-indent: 0pt
      font-size: 10pt
      end-indent: 15pt
      last-line-end-indent: -15pt

      (sosofo-append
       (make line-field
         field-width: 24pt
         field-align: 'left
         (sosofo-append
          title-num-sosofo
          (literal " ")))
       title-sosofo
       (literal " ")
       (make line-field
         field-align: 'right
         (make page-number
           refid: (id nd)))
       ))))

(mode content-mode
  (element section
    (content-section #f (current-node)))
  (element chapter
    (sosofo-append
     (content-chapter "Chapter" (current-node))
     (process-node-list (select-elements (children (current-node)) 'section))
     ))
  (element introduction
    (content-chapter "Introduction" (current-node)))
  (element index
    (content-chapter "Index" (current-node)))
  (element preface
    (content-chapter "Preface" (current-node)))
  (element appendix
    (sosofo-append
     (content-chapter "Appendix" (current-node))
     (process-node-list (select-elements (children (current-node)) 'section))
     ))
  )

(element showtoc
  (make display-group
    (with-mode content-mode
      (process-node-list (node-list
                          (select-elements (descendants (grove-root)) 'introduction)
                          (select-elements (descendants (grove-root)) 'preface)
                          (select-elements (descendants (grove-root)) 'chapter)
                          (select-elements (descendants (grove-root)) 'appendix)
                          (select-elements (descendants (grove-root)) 'index)
                          )
                         ))))
