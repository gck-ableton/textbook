;;; Copyright (c) 2017 Gregor Klinke
;;; All rights reserved.

(use 'admon)
(use 'bibref)
(use 'book-contents)
(use 'book-index)
(use 'book-title)
(use 'book-section)
(use 'book-grammar)
(use 'book-def)
(use 'common)
(use 'example)
(use 'inline)
(use 'para)


;; ------------------------------------------------------------------------------

(element book
  (cond
   ((html-backend?) (book-html (current-node)))
   ((tex-backend?) (book-tex (current-node)))))


;; ------------------------------------------------------------------------------
;;  metainfo support

(element author
  (let ((email (attribute "email" (current-node))))
    (make paragraph
      first-line-start-indent: 0pt
      quadding: "left"
      (sosofo-append
       (process-node-list (attribute "name" (current-node)))
       (if (not (node-list-empty? email))
           (sosofo-append
            (literal " <")
            (process-node-list email)
            (literal ">"))))
      )))


;; #-----------------------------------------------------------------------------

(element idx
  (make anchor
    id: (id (current-node))
    (empty-sosofo)))

(element vidx
  (process-node-list (attribute "text" (current-node))))


;; #-----------------------------------------------------------------------------
;; # references

(define (render-ref-to-node idref nd)
  (case (gi nd)
    ((section) (make sequence
                 html.ref: idref
                 (sosofo-append
                  (literal "Section “")
                  (process-node-list (attribute "title" nd))
                  (literal "”"))))
    (else (empty-sosofo))))

(element ref
  (let* ((idref (data (attribute "ref" (current-node))))
         (nl (if (> (string-length idref) 0)
                 (elements-with-id idref (current-node))
                 (empty-sosofo))))
    (node-list-reduce nl
                      (lambda (sosofo snl)
                        (sosofo-append sosofo
                                       (render-ref-to-node idref snl)))
                      (empty-sosofo))
    ))


(element result
  (literal "⇒"))

(element expansion
  (literal "↦"))

(element equiv
  (literal "≡"))

(element print
  (literal "⊣"))

(element dots
  (literal "…"))

(element ?
  (enclose "[" (attribute "optionalexpr" (current-node)) "]"))


;; #-----------------------------------------------------------------------------

;; (element error
;;   (make glyph
;;     name: 'error))

(root
    (process-children))

;; color all elements red, which are not covered by some other rule
(default
    (make sequence
      ;;color: (color 'rgb '(1.0, 0.0, 0.0))
      color: (color 'x11 'red)
      (process-children)))
